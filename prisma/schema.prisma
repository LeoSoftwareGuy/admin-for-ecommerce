generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  billboards Billboard[]
  categories Category[]
  sizes      Size[]
  colors     Color[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String     @db.ObjectId
  store      Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categories Category[]
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  billboardId String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade)
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Size {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
